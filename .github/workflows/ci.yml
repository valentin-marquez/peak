name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Debug
      run: dotnet build --configuration Debug --no-restore
      
    - name: Build Release
      run: dotnet build --configuration Release --no-restore
      
    - name: Validate manifest.json
      run: |
        echo "Validating manifest.json..."
        python3 -c "
        import json
        import sys
        
        try:
            with open('Release/manifest.json', 'r') as f:
                manifest = json.load(f)
            
            required_fields = ['name', 'version_number', 'website_url', 'description', 'dependencies']
            missing_fields = [field for field in required_fields if field not in manifest]
            
            if missing_fields:
                print(f'Missing required fields: {missing_fields}')
                sys.exit(1)
                
            if not manifest['version_number'].count('.') == 2:
                print('Version must be in format X.Y.Z')
                sys.exit(1)
                
            print('Manifest validation passed!')
            
        except Exception as e:
            print(f'Manifest validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Check file sizes
      run: |
        echo "Checking built DLL size..."
        DLL_SIZE=$(stat -c%s "bin/Release/BagsForEveryone.dll")
        echo "BagsForEveryone.dll size: $DLL_SIZE bytes"
        
        # Warn if DLL is suspiciously large (over 1MB)
        if [ $DLL_SIZE -gt 1048576 ]; then
          echo "⚠️ Warning: DLL is larger than 1MB ($DLL_SIZE bytes)"
        else
          echo "✅ DLL size is reasonable"
        fi
        
    - name: Create test package
      run: |
        echo "Creating test Thunderstore package..."
        mkdir -p test-package
        
        # Create BepInEx folder structure for testing
        mkdir -p test-package/BepInExPack/plugins/BagsForEveryone
        cp bin/Release/BagsForEveryone.dll test-package/BepInExPack/plugins/BagsForEveryone/
        
        # Copy metadata files
        cp Release/manifest.json test-package/
        cp Release/README.md test-package/
        
        # Create placeholder icon for testing
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert -size 256x256 xc:'#2196F3' -gravity center -pointsize 32 -fill white -annotate +0+0 'TEST\nB4E' test-package/icon.png
        
        cd test-package
        zip -r ../test-package.zip .
        cd ..
        
        echo "Test package contents:"
        unzip -l test-package.zip
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BagsForEveryone-build-${{ github.sha }}
        path: |
          bin/Release/BagsForEveryone.dll
          test-package.zip
        retention-days: 7